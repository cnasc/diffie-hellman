(use Int)

(defmodule ModularArithmetic
  (doc +mod "Add a to b, modulo n")
  (defn +mod
    [a b n]
    (positive-mod (+ a b) n))

  (doc -mod "Subtract b from a, modulo n")
  (defn -mod
    [a b n]
    (positive-mod (- a b) n))

  (doc *mod "Divide a by b, modulo n")
  (defn *mod
    [a b n]
    (positive-mod (* a b) n))

  (doc modular "Consume a modulus and an operation, return a function
  which computes (operation arg1 arg2), modulo n")
  (defn modular [n op]
    (fn [a b]
      (positive-mod (op a b) n)))

  ;; TODO: Define expotmod in terms of a recursive process using the technique
  ;; of repeated squaring. To do that, I need to find out how to dynamically
  ;; create a recursive function.
  (doc exptmod "Consume a modulus, return a function which computes a^b, modulo n")
  (defn exptmod [p]
    (modular p pow)))
